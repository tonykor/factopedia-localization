<?php
use yii\helpers\Html;

$this->title = Yii::t('app', 'Help');
$this->params['breadcrumbs'][] = $this->title;
?>

<?= Html::style('
li { font-weight:bold; }
ul.not-bold li { font-weight: normal; }
ol { counter-reset: item }
ol li { display: block }
ol li:before { content: counters(item, ".") " "; counter-increment: item }
') ?>
<h3>Содержание</h3>
<ol>
    <li><a href="#contribution">Внесение своего вклада в проект</a>
        <ol>
            <li><a href="#contribution-about">Как всё работает?</a></li>
            <li><a href="#contribution-voting">Голосование</a></li>
            <li><a href="#contribution-blocks">Блокировки</a></li>
        </ol>
    </li>
    <li><a href="#object">Что мы понимаем под определением "Объект"</a></li>
    <li><a href="#object-properties">Атрибуты объекта</a></li>
        <ol>
            <li><a href="#object-properties-inheritance">Наследование атрибутов</a></li>
            <li><a href="#object-properties-restrictions">Ограничения</a></li>
        </ol>
    <li><a href="#object-create">Добавление нового объекта</a></li>
    <li><a href="#comparisons">Сравнения объектов</a></li>
        <ol>
            <li><a href="#comparisons-sortings">Сортировка объектов</a></li>
            <li><a href="#attributes-comparisons">Особенности сравнения некоторых типов данных</a></li>
        </ol>
</ol>

<h3 id="contribution">Внесение своего вклада в проект</h3>

<?=Yii::$app->params['name'];?> это открытая база с классифицированной информацией об объектах которые нас окружают. Эта база, вебсайт и даже этот текст был создан и поддерживается людьми со всего мира, энтузиастами, такими как ты. Благодоря им много людей может получить быстрый и бесплатный доступ к интересующей их информации и быстро сравнить объекты между собой тем самым быстро принять нужное решение. Именно на выбор мы тратим кучу времени каждый день, мы незнаем что выбрать и нам необходимо видеть сравнительную таблицу что бы принять конечное решение и не сомневаться в выборе. Мы часто задаёмся вопросом почему две, казалась бы, одинаковых вещи оцениваются по разному. Мы хотим "разобрать" каждый объект на мельчайшие "детали", что бы решать эти вопросы стало быстрее. Такая база так же очень важна что бы сберечь и передать знания об объектах будущему поколению. Получить информацию по некоторым вещам в этом мире очень сложно либо впринципе не возможно обычному человеку, поэтому мы призываем людей которые имеют доступ к такой информации поделится ей с обществом, ради общего блага. Учёные и исследователи которые ищут информацию о необходимым им объектам смогут получить её очень быстро, бесплатно и продолжить свои исследования.
<br><br>
Если вам понравилось то что мы делаем вы можете внести свой вклад в проект как волонтёр, вы можете <?= Html::a(Yii::t('app', 'register'), ['users/create']); ?> и начать редактировать <?=Yii::$app->params['name'];?> либо сделайте <?= Html::a(Yii::t('app', 'donation'), ['site/donate']); ?>. Вы так же можете вносить правки как гость, без регистрации.

<h4 id="contribution-about">Как всё работает?</h4>

Гости и зарегистрированные пользователи могут вносить правки в любой <a href="#object">объект</a> или <a href="#comparisons">сравнение</a>, могут обсуждать изменения. Каждый участник может проголосовать за то что бы принять изменения или отклонить. Участники могут подписываться на обновления что бы быстро видеть что происходит в интересующих их категориях.

<h4 id="contribution-voting">Голосование</h4>
Принять или отклонить внесённые изменения решают участники путём голосования. В зависимости от внесённого вклада в проект вес голоса того или иного участника разный. Чем больше пользы пользователь внёс в проект тем его голос имеет больший вес. Когда определённая версия набрала критическое кол-во голосов, версия либо принимается либо откланяется. Изменения так же не могут быть приняты только большим кол-вом мелких голосов, либо малым кол-вом больших голосов. Всё очень просто.

<h4 id="contribution-blocks">Блокировки</h4>
Для защиты от вандалов мы принимает некоторые меры. Участники которые наносят вред проекту блокируются, в зависимости от степени нанесённого вреда время блокировки разное. Для борьбы с вандалами установлены некоторые ограничения на некоторые действия, как например внесение правок или добавление новых объектов. Если вы редактируете <?=Yii::$app->params['name'];?> как гость и часто получаете сообщение попробовать то или иное действие позже, вы можете <?= Html::a(Yii::t('app', 'register'), ['users/create']); ?> что бы увеличить лимиты. Наши лимиты настроены так что бы обычные пользователи не испытывали от этого дискомфорт, если вы добросовестный участник и испытываете проблемы с лимитами, пожалуйста <?= Html::a(Yii::t('app', 'contact us'), ['site/contact']); ?>. 

<h3 id="object">Что мы понимаем под определением "Объект"</h3>

Почти все объекты относятся к какой нибудь категории или как мы это называем "<b>родителям</b>". Родители это такие же объекты которые, в свою очередь, могут иметь своих родителей. И так до тех пор пока у объекта не будет своего родителя. Этот процес мы называем наследием. Объекты которые не имеют родителя, мы называем <b>Первичными объектами</b> или первичными категориями, от них произошли все остальные объекты. Если объект является родителем хотя бы для одного объекта и сам относится к другому родительскому объекту, то мы такой объект называем <b>категорией</b> или <b>промежуточным объектом</b>. Например, так может выглядеть родовое дерево обычной моркови:
<p></p>

<em>Эукариоты / Растения / Цветковые / Двудольные / Зонтикоцветные / Зонтичные / Морковь</em>

<p></p>
Не бойтесь неправильно определить родовое дерево объекта, совместными усилиями мы позже решаем где правильное место объекта в иерархии объектов.
<p></p>
Если объект не является родителем другого объекта, то это - <b>конечный объект</b>, с которыми в основном и идёт работа на нашем ресурсе. Родительские объекты необходимы в основном для классификации конечных объектов. Первичные, промежуточные и конечные объекты, это всё объекты одного типа, но с разным местом в родовом дереве. Итак повторим:
<ul>
    <li>Первичный объект</li> не имеет родителя
    <li>Промежуточный объект</li> имеет родителя и сам является родителем (имеет детей)
    <li>Конечный объект</li> имеет родителя, но сам не является родителем (не имеет детей)
</ul> 

<h3 id="object-properties">Атрибуты объекта</h3>

Каждый объект состоит из множества атрибутов, например атрибутом объекта "Морковь" может быть "Колорийность" или "Содержание жиров", у объекта "Транспорт" может быть атрибут "Средняя скорость".
Объект может наследовать атрибуты своих родителей либо может иметь в себе и новые атрибуты. Атрибуты могут быть как со значениями так и просто присутствовать, что бы остальные объекты, унаследовавшие данный объект, могли ими пользоваться. Мы собираем только объективные факты об объектах. Когда мы сравниваем объекты, мы сравниваем их атрибуты. Несколько слов о том как мы храним и обрабатываем некоторые атрибуты:
<p>
    &#9900; <b>Динамическое значение</b><br><b>Внимание!</b> Настройка этого атрибута требует специальных знаний. <br>Иногда значение атрибута меняется очень часто, иногда менее часто, тем не менее что бы постоянно не обновлять атрибуит, вы можете задать источник и правила парсинга и актуальное значение будет всегда в нашей базе данных.  Когда вы выберите значение атрибута <b>Динамическое значение</b> вы увидите некий каркас JSON объекта который вам будет необходимо заполнить. 
    <pre>
    {
        "url": "",
        "regexp": "",
        "format": "",
        "update_every_h": 24
    }  
    </pre>
    где:
    <ul>
        <li>url</li>
        Адрес с которого необходимо спарсить значение
        <li>regexp</li>
        Регулярное выражение которое будет использовано при парсинге значения со страницы
        <li>format</li>
        Какое то дополнительное форматирование результатирующего значения. На данный момент это может быть только математическое выражение, где <i>a</i>, <i>b</i>, <i>c</i> и т.д. могут быть значения с регулярного выражения. Например если вы хотите первое значение, которое получилось в результате обработки регулярного выражения, умножить на 100, то надо написать в это поле: <i>a*100</i><br>
        Так же есть возможность замены какого то символа в результате на другой, например: <i>replace|,|.</i> после чего все запятые будут заменены на точки.<br>
        Можно использовать несколько форматов один за другим таким образом: <i>{"0":"replace|,|", "1":"a*100"}</i> таким образом в первом найденном значении `a` будут удалены запятые, а потом это значение будет умножено на 100 
        <li>update_every_h</li>
        Как часто обновлять значение в часах
    </ul> 
    в значениях этих настроек все знаки <b>"</b> или <b>\</b> должны быть дополнительно экранированы знаком <b>\</b> спереди, например:
    <pre>
    {
        "url": "https://<?= Yii::$app->params['domain'];?>",
        "regexp": "/class=\"population\" data-count=\"([\\d]+).*\"/i",
        "format": "a*1000",
        "update_every_h": 24
    }      
    </pre>
    Стоить так же заметить что наш парсер пока что не обрабатывает javascript.
</p>
<p>
    &#9900; <b>Стоимость</b> Стоимость необъективная величина в рамках страны не говоря уже о общемировых рамках. Поэтому стоимости объекта пока что нету в нашей базе данных
</p>

<h4 id='object-properties-inheritance'>Наследование атрибутов</h4>

Объекты наследуют атрибуты своих родителей. Потому что как правило объекты одного родителя имеют схожие атрибуты. Добавляя атрибуты к каждому объекту вы наделяете этими атрибутыми все объекты которые произойдут от этого объекта. Указав правильно известные вам атрибуты объекта вы облегчите работу всем остальным кто будет создавать объекты от вашего родителя. Поэтому когда создаёте новые атрибуты убедитесь что они присвоены правильному объекту в иерархии.
Первичные и промежуточные объекты (категории) как правило имеют атрибуты с неопределёнными значениями. В конечном объекте как правило эти атрибуты определяются, то есть им присваиваются значения.


<h4 id='object-properties-restrictions'>Ограничения</h4>
Значения атрибутов
<ul>
    <li>Числовой</li> от -2147483648 до 2147483647 и от -99999.999999999999999 до 99999.999999999999999
    <li>Диапозон</li> от -2147483648 до 2147483647 и от -99999.999999999999999 до 99999.999999999999999
    <li>Текстовый, Динамический</li> 150 знаков
    <li>Множество значений</li> кол-во элементов * 3 + символьная длинна всех значений должна быть меньше либо равна 999 символам
    <li>Множество ссылок на другие объекты</li> кол-во элементов * 3 + символьная длинна всех ID значений объектов должна быть меньше либо равна 50 символам
</ul>

<small>Если вам не достаточно разрешённых значений, пожалуйста <?=Html::a('свяжитесь с нами', ['site/contact']);?>.</small>


<h3 id="object-create">Добавление нового объекта</h3>

Добавляя новый <a href="#object">объект</a> убедитесь что до вас его ещё никто не добавил, для этого сделайте поиск воспользовавшись строкой поиска в верхней части сайта. Добавляя категорию (первичный либо промежуточный объект), убедитесь что он может иметь в себе более одного конечного объекта. Например автомобиль может иметь название равное поколению, а часть его родительского дерева может выглядеть так:
<p>
<em>... / Марка / Модель / Серия / Поколение </em>
</p>
<ul>
    <li>Родительские объекты (Категории)</li>
    Если вы не можете найти необходимую вам категорию, хорошим тоном является создание такой категории перед добавлением нужного объекта. Незабывайте что категория это такой же объект поэтому руководствуйтесь теми же правилами.
    <li>Название</li>
    Укажите полное название конечного объекта, промежуточный объект желательно что бы содержал только конкретное название категории, например в случае с машиной категории могут быть "Машины", "BMW", "E36", "320i sedan", но последний объект желательно называть например "BMW E36 320i sedan, automatic". Название конечного объекта может быть только в единственном числе в именительном падеже. Категории могут быть названы в множественном числе, например "Машины", "Самолёты", "Страны".
    
    <li id="object-description">Описание</li>
    Используйте синтаксис <?= Html::a('Markdown', 'https://en.wikipedia.org/wiki/Markdown#Example', ['rel'=>'nofollow']);?> для форматирования текста. Используйте следующие тэги для ссылок на другие объекты:
    <ul>
        <li>{object}</li>
            Полный формат: {{object:<i>Название или ID объекта</i>:<i>Текст ссылки</i>}}
            <br>
                <i>Название или ID объекта</i> можно опустить если <i>Текст ссылки</i> такой же как название объекта, но в случае если поменяется название объекта ссылка перестанет работать. Поэтому мы рекомендуем ссылаться по ID объекта.
            <br>
            Пример: {{object:Москва:Город Москва}}, {{object:Москва}}, {{object:120:Город Москва}}
    </ul>
    <li>Атрибуты</li>
    Укажите все известные вам <a href="#object-properties">атрибуты</a> объекта, если вам известны значения этих атрибутов, укажите их выбрав единицу измерения, если она необходима.
</ul>

Если вы создаёте объект который будет содержать только множество объектов (то есть по сути категорию), у которого могут быть только абстрактные атрибуты (атрибуты без значений, которые унаследуют её дети), то данный объект необходимо называть в множественном числе например: Самолёты, Ракеты, Транспорт, Овощи и т.д.

<h3 id="comparisons">Сравнения объектов</h3>

<a href="#object">Объекты</a> можно сравнивать между собой. Сравнения помогают лучше понять разницу между объектами.

<h4>Ограничения</h4>
<ul class="not-bold">
    <li>Максимально 20 объектов в одном сравнении</li>
    <li>Максимально можно сортировать по 10 артибутам</li>
    <li>Объекты для сравнения должны иметь хоть бы больше половины общих <a href="#object-properties"">Атрибутов</a></li>
</ul>
<b>Название сравнения</b> это не обязательное поле, если не указано название будет состоять из объектов которые используются в сравнении.

<h4 id="comparisons-sortings">Сортировка объектов</h4>
Объекты могут быть отсортированы по указанным атрибутам, в определённой <i>последовательности</i> и <i>направлении</i>. 
<br><br>
<i>Последовательноcть</i> указывает приоритет сортировки. Объекты будут отсотрированы по указанным атрибутам по указанной последовательности от меньшего к большему. То есть вначале объекты будут отсортированы по атрибуту с номером 1 в последовательности, потом 2 и т.д.
<br><br>
<i>Направление</i> может быть 
<ul>
    <li>По возрастанию (↑)</li>
    от меньшего значения к большему
    <li>По убыванию (↓)</li>
    от большего к меньшему
</ul>
<h4 id="attributes-comparisons">Особенности сравнения некоторых типов данных</h4>
Если со сравнением некоторых типов данных таких как текст или числа не возникает вопросов, то в остальном могут возникнуть вопросы и мы считаем необходимым пояснить как мы на сегодняшний день сравниваем некоторые типы данных.
<ul class='not-bold'>
    <li><b>Диапазон.</b> Две части диапазона соединяются в одно число и сравниваются со значением другого объекта. Hапример диапазон 20-30, при сравнении с другим объектом будет иметь значение 2030</li>
    <li><b>Логическое</b> нет считается меньше чем логическое да</li>
    <li><b>Множество значений</b> сортируется по порядку, все значения склеиваются в строку и сравниваются со значение другого объекта, например: "один, два, три" переводится в строку "дваодинтри" и сравнивается</li>
    <li><b>Объекты</b> сравниваются по своим именам</li>
    <li><b>Множество объектов</b> сравниваются похожим образом как и множество значений, то есть они сортируются по имени и потом имена всех объектов склеивается в одну строку, полученые строки сравниваются между собой, то есть если имена объектов "один, два, три", то при сравнении данный атрибут будет иметь значение "дваодинтри"</li>
</ul>

